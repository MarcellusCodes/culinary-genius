// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Recipe {
    id            String       @id @default(cuid())
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    title         String
    external_slug String       @unique
    description   String
    image         String
    prep_time     String
    cook_time     String
    total_time    String
    categories    Category[]
    ingredients   Ingredient[]
    steps         Step[]
    private       Boolean
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String       @unique
}

model Category {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String   @unique
    image     String
    recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId  String
}

model Ingredient {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    description String
    image       String
    recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId    String
}

model Step {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    text      String
    image     String
    recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId  String
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Recipe        Recipe?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
